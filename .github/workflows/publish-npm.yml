name: Publish Package to npmjs
run-name: "[Publish NPM] Ref:${{ github.ref_name }} Event:${{ github.event_name }}"

on:
  workflow_call:
    inputs:
      node_version:
        required: false
        type: string
        default: '20.x'
        description: 'Node.js version to use'
      registry_url:
        required: false
        type: string
        default: 'https://registry.npmjs.org'
        description: 'NPM registry URL'
      package_access:
        required: false
        type: string
        default: 'public'
        description: 'Whether to publish the package as public or private (must be either "public" or "private")'
      enable_provenance:
        required: false
        type: boolean
        default: true
        description: 'Whether to enable package provenance'
    secrets:
      NPM_TOKEN:
        required: true
        description: 'NPM token for publishing packages'
  release:
    types: [published]

jobs:
  verify-release:
    uses: ./.github/workflows/verify-release.yml

  validate-package:
    needs: [verify-release]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      package_taken: ${{ steps.check_package.outputs.package_taken }}
      package_name: ${{ steps.get_package_name.outputs.package_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for better versioning

      - name: Get package name
        id: get_package_name
        run: echo "package_name=$(node -p "require('./package.json').name.replace(/@.*\//, '')")" >> $GITHUB_OUTPUT

      - name: Validate package.json
        run: |
          if ! jq -e . package.json > /dev/null 2>&1; then
            echo "::error::Invalid package.json file"
            exit 1
          fi
          
          # Check for required fields
          REQUIRED_FIELDS=("name" "version" "description" "main" "author" "license")
          for field in "${REQUIRED_FIELDS[@]}"; do
            if ! jq -e ".$field" package.json > /dev/null 2>&1; then
              echo "::error::Missing required field '$field' in package.json"
              exit 1
            fi
          done

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version || '20.x' }}

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit --no-fund
          npm audit --production

      # Check for typosquatting
      - name: Checking typosquatting patterns
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name.replace(/@.*\//, '')")
          echo "üîç Checking typosquatting patterns of your package name: $PACKAGE_NAME"
          echo "----------------------------------------"

          # Common typosquatting patterns with descriptions
          declare -A PATTERNS=()

          # Only add hyphen/underscore conversions if the character exists
          [[ $PACKAGE_NAME == *"-"* ]] && PATTERNS["${PACKAGE_NAME//-/_}"]="Hyphen to underscore"
          [[ $PACKAGE_NAME == *"_"* ]] && PATTERNS["${PACKAGE_NAME//_/-}"]="Underscore to hyphen"

          # Add js prefix/suffix patterns
          PATTERNS["${PACKAGE_NAME}js"]="Added 'js' suffix"
          PATTERNS["js-${PACKAGE_NAME}"]="Added 'js-' prefix"
          PATTERNS["node-${PACKAGE_NAME}"]="Added 'node-' prefix"

          # Only add character substitutions if the character exists in the package name
          [[ $PACKAGE_NAME == *"a"* ]] && PATTERNS["${PACKAGE_NAME//a/4}"]="Replaced 'a' with '4'"
          [[ $PACKAGE_NAME == *"e"* ]] && PATTERNS["${PACKAGE_NAME//e/3}"]="Replaced 'e' with '3'"
          [[ $PACKAGE_NAME == *"i"* ]] && PATTERNS["${PACKAGE_NAME//i/1}"]="Replaced 'i' with '1'"
          [[ $PACKAGE_NAME == *"o"* ]] && PATTERNS["${PACKAGE_NAME//o/0}"]="Replaced 'o' with '0'"
          [[ $PACKAGE_NAME == *"s"* ]] && PATTERNS["${PACKAGE_NAME//s/5}"]="Replaced 's' with '5'"
          [[ $PACKAGE_NAME == *"t"* ]] && PATTERNS["${PACKAGE_NAME//t/7}"]="Replaced 't' with '7'"

          FOUND_SQUATTERS=false
          echo "üì¶ Found packages names similar to yours $PACKAGE_NAME"
          echo "----------------------------------------"

          for pattern in "${!PATTERNS[@]}"; do
            if npm view "$pattern" &>/dev/null; then
              FOUND_SQUATTERS=true
              VERSION=$(npm view "$pattern" version 2>/dev/null || echo "unknown")
              TIME=$(npm view "$pattern" time.modified 2>/dev/null || echo "unknown")
              AUTHOR=$(npm view "$pattern" author 2>/dev/null || echo "unknown")
              echo "‚ö†Ô∏è Package: $pattern"
              echo "Pattern: ${PATTERNS[$pattern]}"
              echo "Version: $VERSION"
              echo "Last Updated: $TIME"
              echo "Author: $AUTHOR"
              echo "URL: https://www.npmjs.com/package/$pattern"
              echo "----------------------------------------"
            fi
          done

          if [ "$FOUND_SQUATTERS" = true ]; then
            echo "::warning::Potential typosquatters detected (see the workflow logs). Consider registering these names to protect your package."
            echo "TYPOSQUATTERS_FOUND=true" >> $GITHUB_ENV
          else
            echo "‚úÖ No typosquatters found."
            echo "TYPOSQUATTERS_FOUND=false" >> $GITHUB_ENV
          fi

      # Check if unscoped package name is available
      - name: Checking full match
        id: check_package
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name.replace(/@.*\//, '')")
          if npm view $PACKAGE_NAME &>/dev/null; then
            echo "Global package name $PACKAGE_NAME is already taken."
            echo "package_taken=true" >> $GITHUB_OUTPUT
          else
            echo "Global package name $PACKAGE_NAME is available."
            echo "package_taken=false" >> $GITHUB_OUTPUT
          fi

  wait-for-approval:
    needs: [verify-release, validate-package]
    if: needs.validate-package.outputs.package_taken == 'true'
    runs-on: ubuntu-latest
    environment:
      name: package-approval
      url: https://www.npmjs.com/package/${{ needs.validate-package.outputs.package_name }}
    steps:
      - name: Wait for approval
        run: |
          echo "‚ö†Ô∏è The unscoped package name '${{ needs.validate-package.outputs.package_name }}' is already taken on npm."
          echo "Please review and approve this deployment to continue with scoped package only."
          echo "If you want to proceed with publishing only the scoped package, approve this step."
          echo "If you want to abort the workflow, reject this step."

  publish:
    needs: [verify-release, validate-package, wait-for-approval]
    if: always() && needs.verify-release.result == 'success' && needs.validate-package.result == 'success' && (needs.validate-package.outputs.package_taken == 'false' || needs.wait-for-approval.result == 'success')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      # Note: id-token: write is only available in the main repository
      # When called from forked repositories, this permission will be ignored
      id-token: write
    environment:
      name: npm-publish
      url: https://www.npmjs.com/package/${{ needs.validate-package.outputs.package_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version || '20.x' }}
          registry-url: ${{ inputs.registry_url || 'https://registry.npmjs.org' }}

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: Verify package integrity
        run: |
          npm pack --dry-run
          npm audit --production

      # Detect OIDC availability and set up authentication
      - name: Setup authentication method
        id: auth_setup
        run: |
          # Check if we're in the main repository and have OIDC access
          if [[ "${{ github.repository }}" == "nautilus-wraith/package-publishing" ]]; then
            echo "üîê OIDC tokens available (main repository)"
            echo "auth_method=oidc" >> $GITHUB_OUTPUT
            echo "use_oidc=true" >> $GITHUB_OUTPUT
          else
            echo "üîë Using NPM_TOKEN authentication (forked repository or external call)"
            echo "auth_method=token" >> $GITHUB_OUTPUT
            echo "use_oidc=false" >> $GITHUB_OUTPUT
          fi

      # Publish scoped version
      - name: Publish scoped package
        run: |
          if [[ "${{ inputs.package_access }}" != "public" && "${{ inputs.package_access }}" != "private" ]]; then
            echo "::error::package_access must be either 'public' or 'private'"
            exit 1
          fi
          PROVENANCE_FLAG=${{ inputs.enable_provenance && '--provenance' || '' }}
          
          # Use OIDC token if available, otherwise use NPM_TOKEN
          if [[ "${{ steps.auth_setup.outputs.use_oidc }}" == "true" ]]; then
            echo "üîê Publishing with OIDC token..."
            # For OIDC, you would typically use a different authentication method
            # This is a placeholder for future OIDC implementation
            npm publish $PROVENANCE_FLAG --access ${{ inputs.package_access || 'public' }}
          else
            echo "üîë Publishing with NPM_TOKEN..."
            npm publish $PROVENANCE_FLAG --access ${{ inputs.package_access || 'public' }}
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Publish unscoped version if available
      - name: Publish unscoped package as well if not taken
        if: needs.validate-package.outputs.package_taken == 'false'
        run: |
          if [[ "${{ inputs.package_access }}" != "public" && "${{ inputs.package_access }}" != "private" ]]; then
            echo "::error::package_access must be either 'public' or 'private'"
            exit 1
          fi
          PROVENANCE_FLAG=${{ inputs.enable_provenance && '--provenance' || '' }}
          # Temporarily modify package.json to remove scope
          PACKAGE_NAME=$(node -p "require('./package.json').name.replace(/@.*\//, '')")
          npm pkg set name=$PACKAGE_NAME
          
          # Use OIDC token if available, otherwise use NPM_TOKEN
          if [[ "${{ steps.auth_setup.outputs.use_oidc }}" == "true" ]]; then
            echo "üîê Publishing unscoped package with OIDC token..."
            # For OIDC, you would typically use a different authentication method
            # This is a placeholder for future OIDC implementation
            npm publish $PROVENANCE_FLAG --access ${{ inputs.package_access || 'public' }}
          else
            echo "üîë Publishing unscoped package with NPM_TOKEN..."
            npm publish $PROVENANCE_FLAG --access ${{ inputs.package_access || 'public' }}
          fi
          
          # Restore original package.json
          git checkout package.json
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}