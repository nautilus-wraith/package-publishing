name: Publish Package to npmjs
run-name: "[Publish NPM] Ref:${{ github.ref_name }} Event:${{ github.event_name }}"

on:
  workflow_call:
    inputs:
      node_version:
        required: false
        type: string
        default: '20.x'
        description: 'Node.js version to use'
      registry_url:
        required: false
        type: string
        default: 'https://registry.npmjs.org'
        description: 'NPM registry URL'
      package_access:
        required: false
        type: string
        default: 'public'
        description: 'Whether to publish the package as public or private (must be either "public" or "private")'
      enable_provenance:
        required: false
        type: boolean
        default: true
        description: 'Whether to enable package provenance'
    secrets:
      NPM_TOKEN:
        required: true
        description: 'NPM token for publishing packages'
  release:
    types: [published]

jobs:
  verify:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      TAG_NAME: ${{ github.event.release.tag_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify tag signature
        run: |
          set -euo pipefail
          # Get the tag name from the release event
          echo "🔍 Verifying tag: $TAG_NAME"

          # Fetch all history and tags
          echo "📥 Fetching all branches and tags..."
          git fetch --all --tags --force
          
          # Check if the tag is annotated
          echo "🔎 Checking if tag is annotated..."
          if ! git for-each-ref --format='%(objecttype)' refs/tags/"$TAG_NAME" | grep -q '^tag$'; then
            echo "::error::Tag $TAG_NAME is not an annotated tag (likely a lightweight tag)"
            exit 1
          fi

          # Get the signer's username from the tag
          echo "👤 Extracting signer information..."
          TAG_VERIFY_OUTPUT=$(git tag -v "$TAG_NAME" 2>&1 || true)
          echo "Raw verification output:"
          echo "$TAG_VERIFY_OUTPUT"
          
          # Try different patterns to extract the signer
          SIGNER_USERNAME=""
          
          # Pattern 1: GitHub noreply email from tagger line
          if echo "$TAG_VERIFY_OUTPUT" | grep -q "tagger.*@users\.noreply\.github\.com"; then
            SIGNER_USERNAME=$(echo "$TAG_VERIFY_OUTPUT" | grep -oP 'tagger\s+\K[^<]+' | xargs || echo "")
          fi
          
          # Pattern 2: GitHub noreply email from signature
          if [ -z "$SIGNER_USERNAME" ] && echo "$TAG_VERIFY_OUTPUT" | grep -q "users\.noreply\.github\.com"; then
            SIGNER_USERNAME=$(echo "$TAG_VERIFY_OUTPUT" | grep -oP 'Good signature from "\K[^"]+' | xargs || echo "")
          fi
          
          # Pattern 3: Regular email
          if [ -z "$SIGNER_USERNAME" ] && echo "$TAG_VERIFY_OUTPUT" | grep -q "Good signature from"; then
            SIGNER_USERNAME=$(echo "$TAG_VERIFY_OUTPUT" | grep -oP 'Good signature from "\K[^"]+' | xargs || echo "")
          fi
          
          if [ -z "$SIGNER_USERNAME" ]; then
            echo "::error::Could not extract signer username from tag. Please ensure the tag is signed with a valid GPG key."
            echo "Verification output:"
            echo "$TAG_VERIFY_OUTPUT"
            exit 1
          fi
          
          echo "Found signer: $SIGNER_USERNAME"
          echo "🔑 Fetching GPG key for user: $SIGNER_USERNAME"
          
          # Fetch the GPG key from GitHub
          KEY_RESPONSE=$(curl -s -w "\n%{http_code}" "https://github.com/$SIGNER_USERNAME.gpg")
          HTTP_CODE=$(echo "$KEY_RESPONSE" | tail -n1)
          KEY_CONTENT=$(echo "$KEY_RESPONSE" | sed '$d')
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "::error::Failed to fetch GPG key for user $SIGNER_USERNAME (HTTP $HTTP_CODE)"
            echo "Please ensure the GPG key is uploaded to GitHub at https://github.com/$SIGNER_USERNAME.gpg"
            exit 1
          fi
          
          echo "$KEY_CONTENT" | gpg --import
          
          # Verify the tag with the imported key
          echo "🔐 Verifying GPG signature..."
          if ! git tag -v "$TAG_NAME"; then
            echo "::error::❌ Tag $TAG_NAME verification failed"
            exit 1
          fi
          echo "✅ Signature verified successfully with signer's GPG key"

          # Verify the tag points to a commit on main
          echo "🔎 Verifying tag points to a commit on main..."
          TAG_COMMIT=$(git rev-parse "$TAG_NAME")
          MAIN_COMMIT=$(git rev-parse origin/main)
          echo "🔍 Tag commit: $TAG_COMMIT"
          echo "🔍 Main commit: $MAIN_COMMIT"
          
          # Check if the tag commit is an ancestor of main
          echo "🔁 Checking tag commit ancestry against origin/main..."
          if ! git merge-base --is-ancestor "$TAG_COMMIT" "$MAIN_COMMIT"; then
            echo "::error::Tag $TAG_NAME does not point to a commit on main branch"
            exit 1
          fi
          echo "✅ All tag checks passed"

  validate-approvals:
    needs: verify
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      TAG_NAME: ${{ github.event.release.tag_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate release approvals
        run: |
          set -euo pipefail
          echo "🔍 Validating release approvals for tag: $TAG_NAME"
          
          # Check if release approval directory exists
          RELEASE_DIR=".github/releases/$TAG_NAME"
          if [ ! -d "$RELEASE_DIR" ]; then
            echo "::error::Release approval directory $RELEASE_DIR does not exist"
            exit 1
          fi
          
          # Define approval tiers and their required files
          declare -A APPROVER_TIERS=(
            ["first"]=".github/approvers/first"
            ["second"]=".github/approvers/second" 
            ["appsec"]=".github/approvers/appsec"
          )
          
          # Track approvals found
          declare -A APPROVALS_FOUND=()
          # Track unique approvers to ensure 3 different people
          declare -A UNIQUE_APPROVERS=()
          
          echo "📋 Checking approval files in $RELEASE_DIR"
          
          # Get all approval files in the release directory
          if [ -z "$(ls -A $RELEASE_DIR 2>/dev/null)" ]; then
            echo "::error::No approval files found in $RELEASE_DIR"
            exit 1
          fi
          
          # Validate each approval file
          for approval_file in "$RELEASE_DIR"/*; do
            if [ -f "$approval_file" ]; then
              USERNAME=$(basename "$approval_file")
              echo "🔍 Validating approval file for user: $USERNAME"
              
              # Get the commit that last modified this file
              COMMIT_HASH=$(git log -1 --format="%H" -- "$approval_file")
              if [ -z "$COMMIT_HASH" ]; then
                echo "::error::Could not find commit for approval file: $approval_file"
                exit 1
              fi
              
              echo "📝 Last commit for $approval_file: $COMMIT_HASH"
              
              # Get commit verification info
              COMMIT_VERIFY_OUTPUT=$(git show --show-signature "$COMMIT_HASH" 2>&1 || true)
              echo "Commit verification output for $COMMIT_HASH:"
              echo "$COMMIT_VERIFY_OUTPUT"
              
              # Check if commit is signed
              if ! echo "$COMMIT_VERIFY_OUTPUT" | grep -q "gpg: Good signature"; then
                echo "::error::Commit $COMMIT_HASH for approval file $approval_file is not signed with a valid GPG key"
                exit 1
              fi
              
              # Extract signer information from commit
              COMMIT_SIGNER=""
              if echo "$COMMIT_VERIFY_OUTPUT" | grep -q "users\.noreply\.github\.com"; then
                COMMIT_SIGNER=$(echo "$COMMIT_VERIFY_OUTPUT" | grep -oP 'Good signature from "\K[^"]+' | head -1 | xargs || echo "")
              fi
              
              if [ -z "$COMMIT_SIGNER" ] && echo "$COMMIT_VERIFY_OUTPUT" | grep -q "Good signature from"; then
                COMMIT_SIGNER=$(echo "$COMMIT_VERIFY_OUTPUT" | grep -oP 'Good signature from "\K[^"]+' | head -1 | xargs || echo "")
              fi
              
              if [ -z "$COMMIT_SIGNER" ]; then
                echo "::error::Could not extract signer from commit $COMMIT_HASH"
                exit 1
              fi
              
              echo "✅ Commit signed by: $COMMIT_SIGNER"
              
              # Verify that the file was signed by the expected user
              if [[ "$COMMIT_SIGNER" != *"$USERNAME"* ]]; then
                echo "::error::Approval file $approval_file must be signed by $USERNAME, but was signed by $COMMIT_SIGNER"
                exit 1
              fi
              
              # Check which approval tier this user belongs to
              USER_TIER=""
              for tier in "${!APPROVER_TIERS[@]}"; do
                APPROVER_FILE="${APPROVER_TIERS[$tier]}"
                if grep -q "^$USERNAME$" "$APPROVER_FILE" 2>/dev/null; then
                  USER_TIER="$tier"
                  APPROVALS_FOUND["$tier"]="$USERNAME"
                  UNIQUE_APPROVERS["$USERNAME"]="$tier"
                  echo "✅ User $USERNAME found in $tier tier approvers"
                  break
                fi
              done
              
              if [ -z "$USER_TIER" ]; then
                echo "::error::User $USERNAME is not found in any approver tier"
                exit 1
              fi
            fi
          done
          
          # Check that we have approvals from all required tiers
          echo "📊 Checking required approvals..."
          MISSING_APPROVALS=()
          
          for tier in "${!APPROVER_TIERS[@]}"; do
            if [ -z "${APPROVALS_FOUND[$tier]:-}" ]; then
              MISSING_APPROVALS+=("$tier")
            else
              echo "✅ $tier tier approved by: ${APPROVALS_FOUND[$tier]}"
            fi
          done
          
          if [ ${#MISSING_APPROVALS[@]} -ne 0 ]; then
            echo "::error::Missing approvals from the following tiers: ${MISSING_APPROVALS[*]}"
            echo "Required: Each tier (first, second, appsec) must have at least one approval"
            exit 1
          fi
          
          # Validate that we have exactly 3 different approvers
          echo "🔍 Validating unique approvers..."
          UNIQUE_COUNT=${#UNIQUE_APPROVERS[@]}
          echo "Found $UNIQUE_COUNT unique approvers: ${!UNIQUE_APPROVERS[*]}"
          
          if [ "$UNIQUE_COUNT" -ne 3 ]; then
            echo "::error::Expected exactly 3 different approvers, but found $UNIQUE_COUNT"
            echo "Current approvers: ${!UNIQUE_APPROVERS[*]}"
            echo "Each tier must be approved by a different person"
            exit 1
          fi
          
          # Validate that each approver is from a different tier
          TIERS_COVERED=()
          for username in "${!UNIQUE_APPROVERS[@]}"; do
            TIER="${UNIQUE_APPROVERS[$username]}"
            if [[ " ${TIERS_COVERED[*]} " =~ " ${TIER} " ]]; then
              echo "::error::Multiple approvers from the same tier: $TIER"
              echo "Each tier must be approved by a different person"
              exit 1
            fi
            TIERS_COVERED+=("$TIER")
          done
          
          echo "🎉 All required approvals validated successfully!"
          echo "✅ first tier: ${APPROVALS_FOUND[first]}"
          echo "✅ second tier: ${APPROVALS_FOUND[second]}"  
          echo "✅ appsec tier: ${APPROVALS_FOUND[appsec]}"
          echo "✅ All approvals from different people: ${!UNIQUE_APPROVERS[*]}"

  validate:
    needs: [verify, validate-approvals]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      package_taken: ${{ steps.check_package.outputs.package_taken }}
      package_name: ${{ steps.get_package_name.outputs.package_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for better versioning

      - name: Get package name
        id: get_package_name
        run: echo "package_name=$(node -p "require('./package.json').name.replace(/@.*\//, '')")" >> $GITHUB_OUTPUT

      - name: Validate package.json
        run: |
          if ! jq -e . package.json > /dev/null 2>&1; then
            echo "::error::Invalid package.json file"
            exit 1
          fi
          
          # Check for required fields
          REQUIRED_FIELDS=("name" "version" "description" "main" "author" "license")
          for field in "${REQUIRED_FIELDS[@]}"; do
            if ! jq -e ".$field" package.json > /dev/null 2>&1; then
              echo "::error::Missing required field '$field' in package.json"
              exit 1
            fi
          done

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version || '20.x' }}
          registry-url: ${{ inputs.registry_url || 'https://registry.npmjs.org' }}

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit --no-fund
          npm audit --production

      # Check for typosquatting
      - name: Checking typosquatting patterns
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name.replace(/@.*\//, '')")
          echo "🔍 Checking typosquatting patterns of your package name: $PACKAGE_NAME"
          echo "----------------------------------------"

          # Common typosquatting patterns with descriptions
          declare -A PATTERNS=()

          # Only add hyphen/underscore conversions if the character exists
          [[ $PACKAGE_NAME == *"-"* ]] && PATTERNS["${PACKAGE_NAME//-/_}"]="Hyphen to underscore"
          [[ $PACKAGE_NAME == *"_"* ]] && PATTERNS["${PACKAGE_NAME//_/-}"]="Underscore to hyphen"

          # Add js prefix/suffix patterns
          PATTERNS["${PACKAGE_NAME}js"]="Added 'js' suffix"
          PATTERNS["js-${PACKAGE_NAME}"]="Added 'js-' prefix"
          PATTERNS["node-${PACKAGE_NAME}"]="Added 'node-' prefix"

          # Only add character substitutions if the character exists in the package name
          [[ $PACKAGE_NAME == *"a"* ]] && PATTERNS["${PACKAGE_NAME//a/4}"]="Replaced 'a' with '4'"
          [[ $PACKAGE_NAME == *"e"* ]] && PATTERNS["${PACKAGE_NAME//e/3}"]="Replaced 'e' with '3'"
          [[ $PACKAGE_NAME == *"i"* ]] && PATTERNS["${PACKAGE_NAME//i/1}"]="Replaced 'i' with '1'"
          [[ $PACKAGE_NAME == *"o"* ]] && PATTERNS["${PACKAGE_NAME//o/0}"]="Replaced 'o' with '0'"
          [[ $PACKAGE_NAME == *"s"* ]] && PATTERNS["${PACKAGE_NAME//s/5}"]="Replaced 's' with '5'"
          [[ $PACKAGE_NAME == *"t"* ]] && PATTERNS["${PACKAGE_NAME//t/7}"]="Replaced 't' with '7'"

          FOUND_SQUATTERS=false
          echo "📦 Found packages names similar to yours $PACKAGE_NAME"
          echo "----------------------------------------"

          for pattern in "${!PATTERNS[@]}"; do
            if npm view "$pattern" &>/dev/null; then
              FOUND_SQUATTERS=true
              VERSION=$(npm view "$pattern" version 2>/dev/null || echo "unknown")
              TIME=$(npm view "$pattern" time.modified 2>/dev/null || echo "unknown")
              AUTHOR=$(npm view "$pattern" author 2>/dev/null || echo "unknown")
              echo "⚠️ Package: $pattern"
              echo "Pattern: ${PATTERNS[$pattern]}"
              echo "Version: $VERSION"
              echo "Last Updated: $TIME"
              echo "Author: $AUTHOR"
              echo "URL: https://www.npmjs.com/package/$pattern"
              echo "----------------------------------------"
            fi
          done

          if [ "$FOUND_SQUATTERS" = true ]; then
            echo "::warning::Potential typosquatters detected (see the workflow logs). Consider registering these names to protect your package."
            echo "TYPOSQUATTERS_FOUND=true" >> $GITHUB_ENV
          else
            echo "✅ No typosquatters found."
            echo "TYPOSQUATTERS_FOUND=false" >> $GITHUB_ENV
          fi

      # Check if unscoped package name is available
      - name: Checking full match
        id: check_package
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name.replace(/@.*\//, '')")
          if npm view $PACKAGE_NAME &>/dev/null; then
            echo "Global package name $PACKAGE_NAME is already taken."
            echo "package_taken=true" >> $GITHUB_OUTPUT
          else
            echo "Global package name $PACKAGE_NAME is available."
            echo "package_taken=false" >> $GITHUB_OUTPUT
          fi

  wait-for-approval:
    needs: [validate-approvals, validate]
    if: needs.validate.outputs.package_taken == 'true'
    runs-on: ubuntu-latest
    environment:
      name: package-approval
      url: https://www.npmjs.com/package/${{ needs.validate.outputs.package_name }}
    steps:
      - name: Wait for approval
        run: |
          echo "⚠️ The unscoped package name '${{ needs.validate.outputs.package_name }}' is already taken on npm."
          echo "Please review and approve this deployment to continue with scoped package only."
          echo "If you want to proceed with publishing only the scoped package, approve this step."
          echo "If you want to abort the workflow, reject this step."

  publish:
    needs: [verify, validate, wait-for-approval]
    if: always() && needs.verify.result == 'success' && needs.validate.result == 'success' && (needs.validate.outputs.package_taken == 'false' || needs.wait-for-approval.result == 'success')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment:
      name: npm-publish
      url: https://www.npmjs.com/package/${{ needs.validate.outputs.package_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version || '20.x' }}
          registry-url: ${{ inputs.registry_url || 'https://registry.npmjs.org' }}

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: Verify package integrity
        run: |
          npm pack --dry-run
          npm audit --production

      # Publish scoped version
      - name: Publish scoped package
        run: |
          if [[ "${{ inputs.package_access }}" != "public" && "${{ inputs.package_access }}" != "private" ]]; then
            echo "::error::package_access must be either 'public' or 'private'"
            exit 1
          fi
          PROVENANCE_FLAG=${{ inputs.enable_provenance && '--provenance' || '' }}
          npm publish $PROVENANCE_FLAG --access ${{ inputs.package_access || 'public' }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Publish unscoped version if available
      - name: Publish unscoped package as well if not taken
        if: needs.validate.outputs.package_taken == 'false'
        run: |
          if [[ "${{ inputs.package_access }}" != "public" && "${{ inputs.package_access }}" != "private" ]]; then
            echo "::error::package_access must be either 'public' or 'private'"
            exit 1
          fi
          PROVENANCE_FLAG=${{ inputs.enable_provenance && '--provenance' || '' }}
          # Temporarily modify package.json to remove scope
          PACKAGE_NAME=$(node -p "require('./package.json').name.replace(/@.*\//, '')")
          npm pkg set name=$PACKAGE_NAME
          npm publish $PROVENANCE_FLAG --access ${{ inputs.package_access || 'public' }}
          # Restore original package.json
          git checkout package.json
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}