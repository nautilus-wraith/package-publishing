name: Publish Package to pkg.go.dev
run-name: "[Publish Go] Ref:${{ github.ref_name }} Event:${{ github.event_name }}"

on:
  workflow_call:
    inputs:
      go_version:
        required: false
        type: string
        default: '1.22'
        description: 'Go version to use'
      registry_url:
        required: false
        type: string
        default: 'https://pkg.go.dev'
        description: 'Go registry URL'
    secrets:
      GOPROXY_TOKEN:
        required: true
        description: 'Go proxy token for publishing packages'
  release:
    types: [published]

jobs:
  verify:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify tag signature
        run: |
          # Get the tag name from the release event
          TAG_NAME="${{ github.event.release.tag_name }}"
          
          # Verify the tag exists and is signed
          if ! git verify-tag "$TAG_NAME"; then
            echo "::error::Tag $TAG_NAME is not signed or signature verification failed"
            exit 1
          fi
          
          # Verify the tag points to a commit on main
          TAG_COMMIT=$(git rev-parse "$TAG_NAME")
          MAIN_COMMIT=$(git rev-parse origin/main)
          
          # Check if the tag commit is an ancestor of main
          if ! git merge-base --is-ancestor "$TAG_COMMIT" "$MAIN_COMMIT"; then
            echo "::error::Tag $TAG_NAME does not point to a commit on main branch"
            exit 1
          fi

  validate:
    needs: verify
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go_version || '1.22' }}

      - name: Validate go.mod
        run: |
          if [ ! -f "go.mod" ]; then
            echo "::error::go.mod file not found"
            exit 1
          fi
          
          # Check for required fields
          if ! grep -q "^module" go.mod; then
            echo "::error::Missing module declaration in go.mod"
            exit 1
          fi
          
          if ! grep -q "^go " go.mod; then
            echo "::error::Missing Go version in go.mod"
            exit 1
          fi

      # Check for typosquatting
      - name: Checking typosquatting patterns
        run: |
          MODULE_NAME=$(grep -m 1 '^module ' go.mod | cut -d' ' -f2)
          PACKAGE_NAME=$(echo $MODULE_NAME | rev | cut -d'/' -f1 | rev)
          echo "🔍 Checking typosquatting patterns of your package name: $PACKAGE_NAME"
          echo "----------------------------------------"

          # Common typosquatting patterns with descriptions
          declare -A PATTERNS=()

          # Only add hyphen/underscore conversions if the character exists
          [[ $PACKAGE_NAME == *"-"* ]] && PATTERNS["${PACKAGE_NAME//-/_}"]="Hyphen to underscore"
          [[ $PACKAGE_NAME == *"_"* ]] && PATTERNS["${PACKAGE_NAME//_/-}"]="Underscore to hyphen"

          # Add go prefix/suffix patterns
          PATTERNS["${PACKAGE_NAME}-go"]="Added '-go' suffix"
          PATTERNS["go-${PACKAGE_NAME}"]="Added 'go-' prefix"

          # Only add character substitutions if the character exists in the package name
          [[ $PACKAGE_NAME == *"a"* ]] && PATTERNS["${PACKAGE_NAME//a/4}"]="Replaced 'a' with '4'"
          [[ $PACKAGE_NAME == *"e"* ]] && PATTERNS["${PACKAGE_NAME//e/3}"]="Replaced 'e' with '3'"
          [[ $PACKAGE_NAME == *"i"* ]] && PATTERNS["${PACKAGE_NAME//i/1}"]="Replaced 'i' with '1'"
          [[ $PACKAGE_NAME == *"o"* ]] && PATTERNS["${PACKAGE_NAME//o/0}"]="Replaced 'o' with '0'"
          [[ $PACKAGE_NAME == *"s"* ]] && PATTERNS["${PACKAGE_NAME//s/5}"]="Replaced 's' with '5'"
          [[ $PACKAGE_NAME == *"t"* ]] && PATTERNS["${PACKAGE_NAME//t/7}"]="Replaced 't' with '7'"

          FOUND_SQUATTERS=false
          echo "📦 Found packages names similar to yours $PACKAGE_NAME"
          echo "----------------------------------------"

          for pattern in "${!PATTERNS[@]}"; do
            if curl -s "https://pkg.go.dev/search?q=$pattern" | grep -q "No results found"; then
              continue
            else
              FOUND_SQUATTERS=true
              echo "⚠️ Package: $pattern"
              echo "Pattern: ${PATTERNS[$pattern]}"
              echo "URL: https://pkg.go.dev/search?q=$pattern"
              echo "----------------------------------------"
            fi
          done

          if [ "$FOUND_SQUATTERS" = true ]; then
            echo "::warning::Potential typosquatters detected (see the workflow logs). Consider registering these names to protect your package."
            echo "TYPOSQUATTERS_FOUND=true" >> $GITHUB_ENV
          else
            echo "✅ No typosquatters found."
            echo "TYPOSQUATTERS_FOUND=false" >> $GITHUB_ENV
          fi

      # Check if package name is available
      - name: Checking full match
        run: |
          MODULE_NAME=$(grep -m 1 '^module ' go.mod | cut -d' ' -f2)
          if curl -s "https://pkg.go.dev/$MODULE_NAME" | grep -q "No results found"; then
            echo "Package name $MODULE_NAME is available."
            echo "PACKAGE_TAKEN=false" >> $GITHUB_ENV
          else
            echo "Package name $MODULE_NAME is already taken."
            echo "PACKAGE_TAKEN=true" >> $GITHUB_ENV
            echo "::error::Package name $MODULE_NAME is already taken. Exiting workflow."
            # exit 1 # REMOVE IN PROD
          fi

  publish:
    needs: [verify, validate]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment:
      name: go-publish
      url: https://pkg.go.dev/${{ needs.validate.outputs.MODULE_NAME }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go_version || '1.22' }}

      - name: Build and test
        run: |
          go build ./...
          go test ./...

      - name: Create git tag
        run: |
          VERSION=$(grep -m 1 '^go ' go.mod | cut -d' ' -f2)
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
