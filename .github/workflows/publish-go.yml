name: Publish Package to pkg.go.dev
run-name: "[Publish Go] Ref:${{ github.ref_name }} Event:${{ github.event_name }}"

on:
  workflow_call:
    inputs:
      go_version:
        required: false
        type: string
        default: '1.22'
        description: 'Go version to use'
      registry_url:
        required: false
        type: string
        default: 'https://pkg.go.dev'
        description: 'Go registry URL'
      tag:
        required: false
        type: string
        description: 'Tag to use for publishing (defaults to release tag)'
    secrets:
      GOPROXY_TOKEN:
        required: true
        description: 'Go proxy token for publishing packages'
  release:
    types: [published]

jobs:
  verify-release:
    uses: ./.github/workflows/verify-release.yml

  validate-package:
    needs: [verify-release]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      package_taken: ${{ steps.check_package.outputs.package_taken }}
      package_name: ${{ steps.get_package_name.outputs.package_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get package name
        id: get_package_name
        run: |
          # Extract module name from go.mod
          PACKAGE_NAME=$(grep -oP '^module\s+\K[^\s]+' go.mod | head -1)
          if [ -z "$PACKAGE_NAME" ]; then
            echo "::error::Could not extract module name from go.mod"
            exit 1
          fi
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

      - name: Validate go.mod
        run: |
          # Check for required file
          if [ ! -f "go.mod" ]; then
            echo "::error::Missing go.mod file"
            exit 1
          fi
          
          # Validate go.mod syntax
          if ! go mod verify 2>/dev/null; then
            echo "::error::Invalid go.mod file"
            exit 1
          fi
          
          # Check for required fields
          if ! grep -q "^module\s" go.mod; then
            echo "::error::Missing 'module' declaration in go.mod"
            exit 1
          fi
          
          if ! grep -q "^go\s" go.mod; then
            echo "::error::Missing 'go' version in go.mod"
            exit 1
          fi

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go_version || '1.22' }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          go mod download
          go mod verify

      # Check for typosquatting
      - name: Checking typosquatting patterns
        run: |
          PACKAGE_NAME=$(grep -oP '^module\s+\K[^\s]+' go.mod | head -1)
          REGISTRY_URL="${{ inputs.registry_url || 'https://pkg.go.dev' }}"
          echo "üîç Checking typosquatting patterns of your package name: $PACKAGE_NAME"
          echo "üîç Using registry: $REGISTRY_URL"
          echo "----------------------------------------"

          # Common typosquatting patterns with descriptions
          declare -A PATTERNS=()

          # Only add hyphen/underscore conversions if the character exists
          [[ $PACKAGE_NAME == *"-"* ]] && PATTERNS["${PACKAGE_NAME//-/_}"]="Hyphen to underscore"
          [[ $PACKAGE_NAME == *"_"* ]] && PATTERNS["${PACKAGE_NAME//_/-}"]="Underscore to hyphen"

          # Add Go-specific patterns
          PATTERNS["${PACKAGE_NAME}-go"]="Added '-go' suffix"
          PATTERNS["go-${PACKAGE_NAME}"]="Added 'go-' prefix"
          PATTERNS["golang-${PACKAGE_NAME}"]="Added 'golang-' prefix"

          # Only add character substitutions if the character exists in the package name
          [[ $PACKAGE_NAME == *"a"* ]] && PATTERNS["${PACKAGE_NAME//a/4}"]="Replaced 'a' with '4'"
          [[ $PACKAGE_NAME == *"e"* ]] && PATTERNS["${PACKAGE_NAME//e/3}"]="Replaced 'e' with '3'"
          [[ $PACKAGE_NAME == *"i"* ]] && PATTERNS["${PACKAGE_NAME//i/1}"]="Replaced 'i' with '1'"
          [[ $PACKAGE_NAME == *"o"* ]] && PATTERNS["${PACKAGE_NAME//o/0}"]="Replaced 'o' with '0'"
          [[ $PACKAGE_NAME == *"s"* ]] && PATTERNS["${PACKAGE_NAME//s/5}"]="Replaced 's' with '5'"
          [[ $PACKAGE_NAME == *"t"* ]] && PATTERNS["${PACKAGE_NAME//t/7}"]="Replaced 't' with '7'"

          FOUND_SQUATTERS=false
          echo "üì¶ Found packages names similar to yours $PACKAGE_NAME"
          echo "----------------------------------------"

          for pattern in "${!PATTERNS[@]}"; do
            if curl -s "$REGISTRY_URL/$pattern" | grep -q "Module"; then
              FOUND_SQUATTERS=true
              VERSION=$(curl -s "$REGISTRY_URL/$pattern" | grep -oP 'Version:\s*\K[^\s]+' | head -1 || echo "unknown")
              echo "‚ö†Ô∏è Package: $pattern"
              echo "Pattern: ${PATTERNS[$pattern]}"
              echo "Version: $VERSION"
              echo "URL: $REGISTRY_URL/$pattern"
              echo "----------------------------------------"
            fi
          done

          if [ "$FOUND_SQUATTERS" = true ]; then
            echo "::warning::Potential typosquatters detected (see the workflow logs). Consider registering these names to protect your package."
            echo "TYPOSQUATTERS_FOUND=true" >> $GITHUB_ENV
          else
            echo "‚úÖ No typosquatters found."
            echo "TYPOSQUATTERS_FOUND=false" >> $GITHUB_ENV
          fi

      # Check if package name is available and validate ownership
      - name: Checking package availability and ownership
        id: check_package
        run: |
          PACKAGE_NAME=$(grep -oP '^module\s+\K[^\s]+' go.mod | head -1)
          REGISTRY_URL="${{ inputs.registry_url || 'https://pkg.go.dev' }}"
          
          # Build the package for testing
          echo "üî® Building package for ownership test..."
          go build ./...
          
          # Check if package exists on the registry
          if curl -s "$REGISTRY_URL/$PACKAGE_NAME" | grep -q "Module"; then
            echo "Package name $PACKAGE_NAME exists on $REGISTRY_URL."
            echo "package_taken=true" >> $GITHUB_OUTPUT
            
            # For Go modules, ownership is typically determined by repository access
            # We can test by attempting to download the module with our credentials
            echo "üîç Testing module access and ownership..."
            
            # Test if we can access the module (this is the closest we can get to ownership validation)
            if [ "$REGISTRY_URL" = "https://pkg.go.dev" ]; then
              # For pkg.go.dev, we can test module download
              DOWNLOAD_OUTPUT=$(go list -m "$PACKAGE_NAME@latest" 2>&1 || true)
              if echo "$DOWNLOAD_OUTPUT" | grep -q "module not found"; then
                echo "‚úÖ Module not found on public proxy ‚Äî assuming private access or new module"
                echo "Proceeding with update to existing package."
              elif echo "$DOWNLOAD_OUTPUT" | grep -q "go: module"; then
                echo "‚úÖ Package $PACKAGE_NAME exists and we have access (module found)"
                echo "Proceeding with update to existing package."
              else
                echo "‚ö†Ô∏è Could not determine module access from download test."
                echo "Download output: $DOWNLOAD_OUTPUT"
                echo "Proceeding with caution - ensure you have proper repository access."
              fi
            else
              echo "‚ö†Ô∏è Custom registry ownership validation not implemented for Go modules."
              echo "Proceeding with assumption of ownership - ensure you have proper repository access."
            fi
          else
            echo "Package name $PACKAGE_NAME is available on $REGISTRY_URL."
            echo "package_taken=false" >> $GITHUB_OUTPUT
          fi

      # Security audit
      - name: Security audit
        run: |
          # Go doesn't have a built-in security audit tool like npm audit or cargo audit
          # But we can check for known vulnerabilities in dependencies
          echo "üîç Checking for known security vulnerabilities..."
          
          # Install govulncheck if available
          export PATH="$PATH:$(go env GOPATH)/bin"
          if go install golang.org/x/vuln/cmd/govulncheck@latest 2>/dev/null; then
            govulncheck ./... || echo "‚ö†Ô∏è Security vulnerabilities found. Review the output above."
          else
            echo "‚ÑπÔ∏è govulncheck not available. Consider installing for security scanning."
          fi

  publish:
    needs: [verify-release, validate-package]
    if: always() && needs.verify-release.result == 'success' && needs.validate-package.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      # Note: id-token: write is only available in the main repository
      # When called from forked repositories, this permission will be ignored
      id-token: write
    environment:
      name: go-publish
      url: ${{ inputs.registry_url || 'https://pkg.go.dev' }}/${{ needs.validate-package.outputs.package_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go_version || '1.22' }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Validate registry URL format
      - name: Validate registry URL
        if: inputs.registry_url != 'https://pkg.go.dev'
        run: |
          REGISTRY_URL="${{ inputs.registry_url }}"
          
          # Validate registry URL format
          if ! [[ "$REGISTRY_URL" =~ ^https?:// ]]; then
            echo "::error::Invalid registry URL format: $REGISTRY_URL"
            echo "Registry URL must start with http:// or https://"
            exit 1
          fi
          
          echo "Using custom registry: $REGISTRY_URL"

      - name: Clean build artifacts
        run: |
          go clean -cache
          go clean -modcache

      - name: Verify package integrity
        run: |
          go mod download
          go mod verify
          go test ./...
          
          # Security check
          export PATH="$PATH:$(go env GOPATH)/bin"
          if go install golang.org/x/vuln/cmd/govulncheck@latest 2>/dev/null; then
            govulncheck ./... || echo "‚ö†Ô∏è Security vulnerabilities found. Review the output above."
          fi

      - name: Publish to registry
        env:
          GOPROXY_TOKEN: ${{ secrets.GOPROXY_TOKEN }}
        run: |
          REGISTRY_URL="${{ inputs.registry_url || 'https://pkg.go.dev' }}"
          PUBLISH_TAG="${{ inputs.tag || github.event.release.tag_name }}"
          
          # Go modules are automatically published when a tag is pushed
          # This step is mainly for verification and documentation
          echo "‚úÖ Go module is ready for publishing"
          echo "üì¶ Module will be available at: $REGISTRY_URL/${{ needs.validate-package.outputs.package_name }}"
          echo "üè∑Ô∏è Using tag: $PUBLISH_TAG"
          
          # Verify the module can be downloaded
          go list -m ${{ needs.validate-package.outputs.package_name }}@$PUBLISH_TAG
          
          # For custom registries, additional configuration might be needed
          if [ "$REGISTRY_URL" != "https://pkg.go.dev" ]; then
            echo "‚ÑπÔ∏è Custom registry detected: $REGISTRY_URL"
            echo "‚ÑπÔ∏è Ensure your repository is properly configured for the custom registry"
            echo "‚ÑπÔ∏è Go modules are typically published via git tags and proxy configuration"
          fi
