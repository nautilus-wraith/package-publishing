name: Publish Package to crates.io
run-name: "[Publish Cargo] Ref:${{ github.ref_name }} Event:${{ github.event_name }}"

on:
  workflow_call:
    inputs:
      rust_version:
        required: false
        type: string
        default: 'stable'
        description: 'Rust version to use'
      registry_url:
        required: false
        type: string
        default: 'https://crates.io'
        description: 'Cargo registry URL'
    secrets:
      CARGO_TOKEN:
        required: true
        description: 'Cargo token for publishing packages'
  release:
    types: [published]

jobs:
  verify-release:
    uses: ./.github/workflows/verify-release.yml

  validate-package:
    needs: [verify-release]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      package_taken: ${{ steps.check_package.outputs.package_taken }}
      package_name: ${{ steps.get_package_name.outputs.package_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get package name
        id: get_package_name
        run: |
          # Extract package name from Cargo.toml
          PACKAGE_NAME=$(grep -oP '^name\s*=\s*"\K[^"]+' Cargo.toml | head -1)
          if [ -z "$PACKAGE_NAME" ]; then
            echo "::error::Could not extract package name from Cargo.toml"
            exit 1
          fi
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

      - name: Validate Cargo.toml
        run: |
          # Check for required file
          if [ ! -f "Cargo.toml" ]; then
            echo "::error::Missing Cargo.toml file"
            exit 1
          fi
          
          # Validate TOML syntax
          if ! python -c "import tomllib; tomllib.load(open('Cargo.toml', 'rb'))" 2>/dev/null; then
            echo "::error::Invalid Cargo.toml file"
            exit 1
          fi
          
          # Check for required fields
          REQUIRED_FIELDS=("name" "version" "description" "authors" "license")
          for field in "${REQUIRED_FIELDS[@]}"; do
            if ! grep -q "^$field\s*=" Cargo.toml; then
              echo "::error::Missing required field '$field' in Cargo.toml"
              exit 1
            fi
          done

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ inputs.rust_version || 'stable' }}
          override: true

      - name: Cache Cargo registry and target
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install dependencies
        run: |
          cargo install cargo-release
          cargo install cargo-audit

      - name: Install package dependencies
        run: |
          cargo fetch

      # Configure custom registry if specified
      - name: Configure custom registry
        if: inputs.registry_url != 'https://crates.io'
        run: |
          REGISTRY_URL="${{ inputs.registry_url }}"
          
          # Validate registry URL format
          if ! [[ "$REGISTRY_URL" =~ ^https?:// ]]; then
            echo "::error::Invalid registry URL format: $REGISTRY_URL"
            echo "Registry URL must start with http:// or https://"
            exit 1
          fi
          
          REGISTRY_NAME=$(echo "$REGISTRY_URL" | sed 's|https://||' | sed 's|http://||' | sed 's|\.|_|g' | sed 's|/|_|g')
          
          # Add custom registry to Cargo config
          mkdir -p ~/.cargo
          cat >> ~/.cargo/config.toml << EOF
          [registries.$REGISTRY_NAME]
          index = "$REGISTRY_URL"
          EOF
          
          echo "Configured custom registry: $REGISTRY_NAME -> $REGISTRY_URL"

      # Check for typosquatting
      - name: Checking typosquatting patterns
        run: |
          PACKAGE_NAME=$(grep -oP '^name\s*=\s*"\K[^"]+' Cargo.toml | head -1)
          REGISTRY_URL="${{ inputs.registry_url || 'https://crates.io' }}"
          echo "🔍 Checking typosquatting patterns of your package name: $PACKAGE_NAME"
          echo "🔍 Using registry: $REGISTRY_URL"
          echo "----------------------------------------"

          # Common typosquatting patterns with descriptions
          declare -A PATTERNS=()

          # Only add hyphen/underscore conversions if the character exists
          [[ $PACKAGE_NAME == *"-"* ]] && PATTERNS["${PACKAGE_NAME//-/_}"]="Hyphen to underscore"
          [[ $PACKAGE_NAME == *"_"* ]] && PATTERNS["${PACKAGE_NAME//_/-}"]="Underscore to hyphen"

          # Add Rust-specific patterns
          PATTERNS["${PACKAGE_NAME}-rs"]="Added '-rs' suffix"
          PATTERNS["rs-${PACKAGE_NAME}"]="Added 'rs-' prefix"
          PATTERNS["rust-${PACKAGE_NAME}"]="Added 'rust-' prefix"

          # Only add character substitutions if the character exists in the package name
          [[ $PACKAGE_NAME == *"a"* ]] && PATTERNS["${PACKAGE_NAME//a/4}"]="Replaced 'a' with '4'"
          [[ $PACKAGE_NAME == *"e"* ]] && PATTERNS["${PACKAGE_NAME//e/3}"]="Replaced 'e' with '3'"
          [[ $PACKAGE_NAME == *"i"* ]] && PATTERNS["${PACKAGE_NAME//i/1}"]="Replaced 'i' with '1'"
          [[ $PACKAGE_NAME == *"o"* ]] && PATTERNS["${PACKAGE_NAME//o/0}"]="Replaced 'o' with '0'"
          [[ $PACKAGE_NAME == *"s"* ]] && PATTERNS["${PACKAGE_NAME//s/5}"]="Replaced 's' with '5'"
          [[ $PACKAGE_NAME == *"t"* ]] && PATTERNS["${PACKAGE_NAME//t/7}"]="Replaced 't' with '7'"

          FOUND_SQUATTERS=false
          echo "📦 Found packages names similar to yours $PACKAGE_NAME"
          echo "----------------------------------------"

          for pattern in "${!PATTERNS[@]}"; do
            if curl -s "$REGISTRY_URL/api/v1/crates/$pattern" | grep -q '"crate"'; then
              FOUND_SQUATTERS=true
              VERSION=$(curl -s "$REGISTRY_URL/api/v1/crates/$pattern" | python -c "import sys, json; data = json.load(sys.stdin); print(data['crate']['max_version'])" 2>/dev/null || echo "unknown")
              AUTHOR=$(curl -s "$REGISTRY_URL/api/v1/crates/$pattern" | python -c "import sys, json; data = json.load(sys.stdin); print(data['crate']['repository'])" 2>/dev/null || echo "unknown")
              echo "⚠️ Package: $pattern"
              echo "Pattern: ${PATTERNS[$pattern]}"
              echo "Version: $VERSION"
              echo "Repository: $AUTHOR"
              echo "URL: $REGISTRY_URL/crates/$pattern"
              echo "----------------------------------------"
            fi
          done

          if [ "$FOUND_SQUATTERS" = true ]; then
            echo "::warning::Potential typosquatters detected (see the workflow logs). Consider registering these names to protect your package."
            echo "TYPOSQUATTERS_FOUND=true" >> $GITHUB_ENV
          else
            echo "✅ No typosquatters found."
            echo "TYPOSQUATTERS_FOUND=false" >> $GITHUB_ENV
          fi

      # Check if package name is available and validate ownership
      - name: Checking package availability and ownership
        id: check_package
        run: |
          PACKAGE_NAME=$(grep -oP '^name\s*=\s*"\K[^"]+' Cargo.toml | head -1)
          REGISTRY_URL="${{ inputs.registry_url || 'https://crates.io' }}"
          
          # Build the package for testing
          echo "🔨 Building package for ownership test..."
          cargo build --release
          
          # Check if package exists on the registry
          if curl -s "$REGISTRY_URL/api/v1/crates/$PACKAGE_NAME" | grep -q '"crate"'; then
            echo "Package name $PACKAGE_NAME exists on $REGISTRY_URL."
            echo "package_taken=true" >> $GITHUB_OUTPUT
            
            # Test ownership by attempting a dry-run publish
            echo "🔍 Testing package ownership with dry-run publish..."
            if [ "$REGISTRY_URL" = "https://crates.io" ]; then
              # Dry-run only works with crates.io
              DRY_RUN_OUTPUT=$(cargo publish --dry-run --token ${{ secrets.CARGO_TOKEN }} 2>&1 || true)
            else
              echo "⚠️ Dry-run publish not supported for custom registries. Proceeding with ownership assumption."
              echo "package_taken=true" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            # Check if the dry-run was successful (indicating we own the package)
            if echo "$DRY_RUN_OUTPUT" | grep -q "Uploading"; then
              echo "✅ Package $PACKAGE_NAME exists and we have ownership (dry-run succeeded)"
              echo "Proceeding with update to existing package."
            elif echo "$DRY_RUN_OUTPUT" | grep -q "already exists"; then
              echo "✅ Package $PACKAGE_NAME exists and we have ownership (version already exists)"
              echo "Proceeding with update to existing package."
            elif echo "$DRY_RUN_OUTPUT" | grep -q "error: failed to get a 200 OK response"; then
              echo "::error::Package $PACKAGE_NAME exists on $REGISTRY_URL but we do not have ownership."
              echo "Dry-run failed - you do not have permission to update this package."
              echo "Please choose a different package name or contact the package owner."
              exit 1
            elif echo "$DRY_RUN_OUTPUT" | grep -q "error: failed to get a 403"; then
              echo "::error::Package $PACKAGE_NAME exists on $REGISTRY_URL but we do not have ownership."
              echo "Dry-run failed with 403 Forbidden - you do not have permission to update this package."
              echo "Please choose a different package name or contact the package owner."
              exit 1
            elif echo "$DRY_RUN_OUTPUT" | grep -q "error: failed to get a 409"; then
              echo "::error::Package $PACKAGE_NAME exists on $REGISTRY_URL but we do not have ownership."
              echo "Dry-run failed with 409 Conflict - package name is taken by another user."
              echo "Please choose a different package name."
              exit 1
            else
              echo "⚠️ Could not determine package ownership from dry-run test."
              echo "Dry-run output: $DRY_RUN_OUTPUT"
              echo "Proceeding with caution - ensure you have proper permissions."
            fi
          else
            echo "Package name $PACKAGE_NAME is available on $REGISTRY_URL."
            echo "package_taken=false" >> $GITHUB_OUTPUT
          fi

      # Security audit
      - name: Security audit
        run: |
          cargo audit --deny warnings

  publish:
    needs: [verify-release, validate-package]
    if: always() && needs.verify-release.result == 'success' && needs.validate-package.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment:
      name: cargo-publish
      url: ${{ inputs.registry_url || 'https://crates.io' }}/crates/${{ needs.validate-package.outputs.package_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ inputs.rust_version || 'stable' }}
          override: true

      - name: Cache Cargo registry and target
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install dependencies
        run: |
          cargo install cargo-release

      - name: Clean build artifacts
        run: rm -rf target/

      # Configure custom registry if specified
      - name: Configure custom registry
        if: inputs.registry_url != 'https://crates.io'
        run: |
          REGISTRY_URL="${{ inputs.registry_url }}"
          
          # Validate registry URL format
          if ! [[ "$REGISTRY_URL" =~ ^https?:// ]]; then
            echo "::error::Invalid registry URL format: $REGISTRY_URL"
            echo "Registry URL must start with http:// or https://"
            exit 1
          fi
          
          REGISTRY_NAME=$(echo "$REGISTRY_URL" | sed 's|https://||' | sed 's|http://||' | sed 's|\.|_|g' | sed 's|/|_|g')
          
          # Add custom registry to Cargo config
          mkdir -p ~/.cargo
          cat >> ~/.cargo/config.toml << EOF
          [registries.$REGISTRY_NAME]
          index = "$REGISTRY_URL"
          EOF
          
          echo "Configured custom registry: $REGISTRY_NAME -> $REGISTRY_URL"

      - name: Verify package integrity
        run: |
          cargo check
          cargo test
          cargo audit --deny warnings
          cargo package --list

      - name: Publish to registry
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_TOKEN }}
        run: |
          REGISTRY_URL="${{ inputs.registry_url || 'https://crates.io' }}"
          if [ "$REGISTRY_URL" != "https://crates.io" ]; then
            REGISTRY_NAME=$(echo "$REGISTRY_URL" | sed 's|https://||' | sed 's|http://||' | sed 's|\.|_|g' | sed 's|/|_|g')
            echo "Publishing to custom registry: $REGISTRY_NAME"
            cargo publish --registry $REGISTRY_NAME
          else
            echo "Publishing to crates.io"
            cargo publish
          fi
